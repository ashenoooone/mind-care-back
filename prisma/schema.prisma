// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  telegramId     Int              @unique
  tgNickname     String?
  name           String
  timezone       Int
  phoneNumber    String?          @unique
  appointments   Appointment[]
  SupportRequest SupportRequest[]
  AiHint         AiHint[]
}

model Service {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  duration     Int
  price        Float
  appointments Appointment[]
}

model Appointment {
  id        Int               @id @default(autoincrement())
  clientId  Int
  client    User              @relation(fields: [clientId], references: [id])
  serviceId Int
  service   Service           @relation(fields: [serviceId], references: [id])
  startTime DateTime
  endTime   DateTime
  note      String?
  status    AppointmentStatus
  aiHints   String?
  AiHint    AiHint[]
}

model AiHint {
  id            Int         @id @default(autoincrement())
  hint          String
  appointmentId Int
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  clientId      Int
  client        User        @relation(fields: [clientId], references: [id])
  createdAt     DateTime    @default(now())
}

model SupportRequest {
  id          Int           @id @default(autoincrement())
  clientId    Int
  client      User          @relation(fields: [clientId], references: [id])
  createdAt   DateTime      @default(now())
  description String
  status      SupportStatus @default(PENDING)
}

model DaySchedule {
  id        Int      @id @default(autoincrement())
  date      DateTime
  startHour Int
  endHour   Int
}

model WorkingSchedule {
  id        Int     @id @default(autoincrement())
  dayOfWeek Int // 0 - Понедельник, 1 - Вторник, ..., 6 - Воскресенье
  isWorking Boolean // true, если рабочий день
  startHour Int // Час начала работы (например, 9)
  endHour   Int // Час окончания работы (например, 18)
}

model NonWorkingDay {
  id     Int      @id @default(autoincrement())
  date   DateTime // Дата нерабочего дня
  reason String // Причина (например, отпуск, праздники)
}

model ServerSettings {
  id            Int      @id @default(autoincrement())
  adminTimezone Int // from msk
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  adminToken    String
}

enum SupportStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}
